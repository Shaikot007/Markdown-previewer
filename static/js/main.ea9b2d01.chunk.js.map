{"version":3,"sources":["Components/Preview.js","Components/MarkdownPreviewerApp.js","serviceWorker.js","index.js"],"names":["Marked","setOptions","gfm","breaks","Preview","props","id","className","dangerouslySetInnerHTML","__html","text","MarkdownPreviewerApp","state","handleChange","bind","event","this","setState","target","value","onChange","href","rel","Component","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"oVAIAA,IAAOC,WAAW,CAChBC,KAAK,EACLC,QAAQ,IAGV,IAMeC,EANC,SAACC,GACf,OACI,yBAAKC,GAAG,UAAUC,UAAU,gBAAgBC,wBAAyB,CAACC,OAAQT,IAAOK,EAAMK,UCgClFC,E,kDAtCX,WAAYN,GAAQ,IAAD,8BACnB,cAAMA,IACGO,MAAQ,CACTF,KAAK,ivCAET,EAAKG,aAAe,EAAKA,aAAaC,KAAlB,gBALL,E,yDAONC,GACTC,KAAKC,SAAS,CACVP,KAAMK,EAAMG,OAAOC,U,+BAIvB,OACI,yBAAKZ,UAAU,aACX,4BAAQA,UAAU,gBACd,mDAEJ,yBAAKA,UAAU,sBACX,yBAAKA,UAAU,cACX,uBAAGA,UAAU,+BAAb,WACA,8BAAUD,GAAG,SAASa,MAAOH,KAAKJ,MAAMF,KAAMU,SAAUJ,KAAKH,gBAEjE,yBAAKN,UAAU,mBACX,uBAAGA,UAAU,+BAAb,cACA,yBAAKA,UAAU,kBACX,kBAAC,EAAD,CAASG,KAAMM,KAAKJ,MAAMF,UAItC,gCACI,sCAAW,uBAAGW,KAAK,gCAAgCH,OAAO,SAASI,IAAI,uBAA5D,kB,GAhCIC,aCQfC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCZNC,IAASC,OACP,kBAAC,IAAMC,WAAP,KACE,kBAAC,EAAD,OAEFC,SAASC,eAAe,SDyHpB,kBAAmBC,WACrBA,UAAUC,cAAcC,MACrBC,MAAK,SAAAC,GACJA,EAAaC,gBAEdC,OAAM,SAAAC,GACLC,QAAQD,MAAMA,EAAME,c","file":"static/js/main.ea9b2d01.chunk.js","sourcesContent":["import React from 'react';\r\nimport Marked from \"marked\";\r\nimport './Preview.css';\r\n\r\nMarked.setOptions({\r\n  gfm: true,\r\n  breaks: true,\r\n});\r\n\r\nconst Preview = (props) => {\r\n  return (     \r\n      <div id=\"preview\" className=\"markdown-body\" dangerouslySetInnerHTML={{__html: Marked(props.text)}} />\r\n    )\r\n}\r\n\r\nexport default Preview;","import React, { Component } from 'react';\r\nimport './MarkdownPreviewerApp.css';\r\nimport Preview from './Preview';\r\n\r\nclass MarkdownPreviewerApp extends Component {\r\n    constructor(props) {\r\n    super(props);\r\n        this.state = {\r\n            text: `# Welcome to my React Markdown Previewer!\\n\\n## This is a sub-heading...\\n### And here's some other cool stuff:\\n\\nHeres some code, \\`<div></div>\\`, between 2 backticks.\\n\\n\\`\\`\\`\\n// this is multi-line code:\\n\\nfunction anotherExample(firstLine, lastLine) {\\n  if (firstLine == '\\`\\`\\`' && lastLine == '\\`\\`\\`') {\\n    return multiLineCode;\\n  }\\n}\\n\\`\\`\\`\\n\\n\\nYou can also make text **bold**... whoa!\\nOr _italic_.\\nOr... wait for it... **_both!_**\\nAnd feel free to go crazy ~~crossing stuff out~~.\\n\\n\\nThere's also [links](https://www.freecodecamp.com), and\\n> Block Quotes!\\n\\nAnd if you want to get really crazy, even tables:\\n\\nWild Header | Crazy Header | Another Header?\\n------------ | ------------- | ------------- \\nYour content can | be here, and it | can be here...\\nAnd here. | Okay. | I think we get it.\\n\\n- And of course, there are lists.\\n  - Some are bulleted.\\n     - With different indentation levels.\\n        - That looks like this.\\n\\n1. And there are numbered lists too.\\n1. Use just 1s if you want! \\n1. But the list goes on...\\n- Even if you use dashes or asterisks.\\n* And last but not least, let's not forget embedded images:\\n\\n\\n![React Logo w/ Text](https://techchronos.com/wp-content/uploads/SszarkLabs/stack-icon/cywBkaGwkMeDAuJbSt1k.png)`\r\n        }\r\n        this.handleChange = this.handleChange.bind(this);\r\n    }\r\n    handleChange(event) {\r\n        this.setState({\r\n            text: event.target.value,\r\n        });\r\n    }\r\n    render() {\r\n        return (\r\n            <div className=\"MarkedApp\">\r\n                <header className=\"MarkedHeader\">\r\n                    <h1>Markdown Previewer</h1>\r\n                </header>\r\n                <div className=\"MarkedPreviewerBox\">\r\n                    <div className=\"TextEditor\">\r\n                        <i className=\"fab fa-2x fa-free-code-camp\"> Editor</i>\r\n                        <textarea id=\"editor\" value={this.state.text} onChange={this.handleChange}/>\r\n                    </div>\r\n                    <div className=\"MarkedPreviewer\">\r\n                        <i className=\"fab fa-2x fa-free-code-camp\"> Previewer</i>\r\n                        <div className=\"PreviewSection\">\r\n                            <Preview text={this.state.text}/>\r\n                        </div>\r\n                    </div>\r\n                </div>\r\n                <footer>\r\n                    <p>Made by <a href=\"https://github.com/Shaikot007\" target=\"_blank\" rel=\"noopener noreferrer\">Shaikot</a></p>\r\n                </footer>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default MarkdownPreviewerApp;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './Components/MarkdownPreviewerApp';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();"],"sourceRoot":""}